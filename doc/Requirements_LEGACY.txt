Blocked:

Finished:
    - Wrote small test cases and bluprint design for implementing LR(1) parser
    - Writing inital set archetecutre
    - Able to read hexdecimal assembly code to be interperated
    - Error handler and displayer
    - Finish completed work in the requirements (just implement requirements.txt practice during mid project)
    - Definate and come up with better names than the W_Language... fucking embearssing.
        - Whole Number language => W_Lang because were just using integers for the code. its an impractical compiler.
    - add assebly readable for testing when doing the compiler and so forth 
        - global variable that is able to print the assembly that is being processed
    - general test for procedural functionality 
    - rewrite highlevel syntax
    - Restructure order of file system in source. (look at project for VS C++ on windows)
    - fix the expression with the LL(1) implementation.
    - fix the negative number in scanner.
    - write the LL(1) parser
        - working with finishing assignment and applying boolean expressions into normal expressions.
        - finish working on condition statements
        - finish on loops 
        - add bitwise operators 
            - and &
            - or |
            - exclusive ^ 
            - not !
            - left <<
            - right >>
        - add a debug print that will later be integrated
    - Add line counter for jumps system. will need to rework the assembly and some other information.
        - also add it to the english framework
        ex.) L1: load r1, 234
                 add r1, 1
                 print r1
    - write an error reader.... its getting very sloppy
    - fix bug with scanner and numbers
    - fix bug with variable declarations
    - refactor processor and assebly representation.
        - write backend code generator  
        - convert assembly english to byteCode.
        - convert assembly from compiler
    - test and record bugs.
    - fix boolean logic in assembly.
    - fix ast expression for booleans for add and or. 
    - Refactor error reader from both Processor and Compiler in the parent location.
    - modulus support
    - Able to read different flags on command line.
    - switch statements
    - global variables
    - Write function support
        - with return working
    - refactor majority of code base for redudanceies from array implementation.
        - still awaiting for major features to be implemented in order to get a pure cleanup.
    - fixed return value error for a value in a function
    - array, strings, and chars
        - Finished chars.
        - finished array and string delecarations and with inital data.
        - finished by index access.
        - finished array and strings as parameters.
        - added and finished a delete operation.
        - finished returning array and strings as a return values.
        - finished equal values in assigning two arrays. 
        - bug was found for declaring size of array which was solved.
    - Write default libary in assembly
        - add special constants (done)
        - add limits (done)
        - add a IO library
            - SCAN (done)
            - PRINT (done)
        - string/array manipulation library
            - COPY (done)
            - LENGTH (done)
            - EQUAL (done)

THIS IS NOW IN TRELLO!!!!
In Progress:
    - Clean repo.
        - organize all of the general functions into seperate cpp files.
        - Implement HUGE ammount of functions into other classes.
        - pull out functions used in both Processor and Compiler in W_Source folder.
        - Have a new folder to do build of the object files in the Makefile
        - write actual errors and have a better working error system. DOES NOT HAVE TO BE PERFECT BUT IT HAS TO MAKE SENSE!
    - BUGS!!!!
        - Fix the deletion of AST (memory leak issue)
        - Clean up char and strings having '\' to work
        - Fix multiline comment not working
        - Fix spaces with chars and strings being allowed

THIS IS NOW IN TRELLO!!!!
TODO:
    - Write cross file communication as classes
        - Able to compile other W files
            - ex.) import file => file.w gets frontended and added to AST => DO_SOME_FUNCTION() => "Hello, I'm from FileA" AND PRINT(value, pintn); => 123 
    - DOCUMENT! (READEME.md final draft)
        - Document you want it to work as a practical compiler with specific archetecutre, suport OOP, list arrays, and multi arrays

